{:package "server",
 :options {:port 7011},
 :files {"updater.router" {:ns ["ns" "server.updater.router"],
                           :defs {"change" ["defn"
                                            "change"
                                            ["db" "op-data" "session-id" "op-id" "op-time"]
                                            ["assoc-in" "db" ["[]" ":sessions" "session-id" ":router"] "op-data"]]},
                           :procs []},
         "twig.container" {:ns ["ns"
                                "server.twig.container"
                                [":require"
                                 ["[]" "recollect.bunch" ":refer" ["[]" "create-twig"]]
                                 ["[]" "server.twig.user" ":refer" ["[]" "twig-user"]]
                                 ["[]" "server.twig.page-files" ":refer" ["[]" "twig-page-files"]]
                                 ["[]" "server.twig.page-editor" ":refer" ["[]" "twig-page-editor"]]]],
                           :defs {"twig-container" ["def"
                                                    "twig-container"
                                                    ["create-twig"
                                                     ":container"
                                                     ["fn"
                                                      ["db" "session"]
                                                      ["let"
                                                       [["logged-in?" ["some?" [":user-id" "session"]]]
                                                        ["router" [":router" "session"]]
                                                        ["writer" [":writer" "session"]]
                                                        ["ir" [":ir" "db"]]]
                                                       ["if"
                                                        "logged-in?"
                                                        ["{}"
                                                         [":session" ["dissoc" "session" ":router"]]
                                                         [":logged-in?" "true"]
                                                         [":user"
                                                          ["twig-user"
                                                           ["get-in" "db" ["[]" ":users" [":user-id" "session"]]]]]
                                                         [":router"
                                                          ["assoc"
                                                           "router"
                                                           ":data"
                                                           ["case"
                                                            [":name" "router"]
                                                            [":files"
                                                             ["twig-page-files"
                                                              [":files" "ir"]
                                                              ["get-in" "session" ["[]" ":writer" ":selected-ns"]]]]
                                                            [":editor" ["twig-page-editor" [":files" "ir"] "writer"]]
                                                            "nil"]]]]
                                                        ["{}" [":session" "session"] [":logged-in?" "false"]]]]]]]},
                           :procs []},
         "updater.writer" {:ns ["ns" "server.updater.writer"],
                           :defs {"edit" ["defn"
                                          "edit"
                                          ["db" "op-data" "session-id" "op-id" "op-time"]
                                          ["let"
                                           [["ns-text"
                                             ["get-in" "db" ["[]" ":sessions" "session-id" ":writer" ":selected-ns"]]]
                                            ["bookmark" ["assoc" "op-data" ":ns" "ns-text" ":focus" ["[]"]]]]
                                           ["->"
                                            "db"
                                            ["update-in"
                                             ["[]" ":sessions" "session-id" ":writer"]
                                             ["fn"
                                              ["writer"]
                                              ["let"
                                               [[["{}" ["stack" ":stack"] ["pointer" ":pointer"]] "writer"]]
                                               ["assoc"
                                                "writer"
                                                ":stack"
                                                ["conj" "stack" "bookmark"]
                                                ":pointer"
                                                ["count" "stack"]]]]]
                                            ["assoc-in"
                                             ["[]" ":sessions" "session-id" ":router"]
                                             ["{}" [":name" ":editor"]]]]]],
                                  "point-to" ["defn"
                                              "point-to"
                                              ["db" "op-data" "session-id" "op-id" "op-time"]
                                              ["assoc-in"
                                               "db"
                                               ["[]" ":sessions" "session-id" ":writer" ":pointer"]
                                               "op-data"]],
                                  "focus" ["defn"
                                           "focus"
                                           ["db" "op-data" "session-id" "op-id" "op-time"]
                                           ["let"
                                            [["writer" ["get-in" "db" ["[]" ":sessions" "session-id" ":writer"]]]]
                                            ["assoc-in"
                                             "db"
                                             ["[]"
                                              ":sessions"
                                              "session-id"
                                              ":writer"
                                              ":stack"
                                              [":pointer" "writer"]
                                              ":focus"]
                                             "op-data"]]]},
                           :procs []},
         "util" {:ns ["ns" "server.util"],
                 :defs {"find-first" ["defn"
                                      "find-first"
                                      ["f" "xs"]
                                      ["reduce" ["fn" ["_" "x"] ["when" ["f" "x"] ["reduced" "x"]]] "nil" "xs"]],
                        "expr?" ["defn" "expr?" ["x"] ["=" ":expr" [":type" "x"]]],
                        "leaf?" ["defn" "leaf?" ["x"] ["=" ":leaf" [":type" "x"]]],
                        "bookmark->path" ["defn"
                                          "bookmark->path"
                                          ["bookmark"]
                                          ["assert" ["map?" "bookmark"] "|Bookmark should be data"]
                                          ["assert" ["contains?" "kinds" [":kind" "bookmark"]] "|invalid bookmark type"]
                                          ["if"
                                           ["=" ":def" [":kind" "bookmark"]]
                                           ["concat"
                                            ["[]" ":ir" ":files" [":ns" "bookmark"] ":defs" [":extra" "bookmark"]]
                                            ["mapcat" "prepend-data" [":focus" "bookmark"]]]
                                           ["concat"
                                            ["[]" ":ir" ":files" [":ns" "bookmark"] ":ns"]
                                            ["mapcat" "prepend-data" [":focus" "bookmark"]]]]],
                        "prepend-data" ["defn" "prepend-data" ["x"] ["[]" ":data" "x"]],
                        "kinds" ["def" "kinds" ["#{}" ":ns" ":def" ":proc"]]},
                 :procs []},
         "schema" {:ns ["ns" "server.schema"],
                   :defs {"ir-file" ["def" "ir-file" ["{}" [":pkg" "|app"] [":files" ["{}"]]]],
                          "expr" ["def"
                                  "expr"
                                  ["{}" [":type" ":expr"] [":author" "nil"] [":time" "nil"] [":data" ["{}"]]]],
                          "configs" ["def"
                                     "configs"
                                     ["{}"
                                      [":storage-key" "|coir.edn"]
                                      [":port" ["or" [".-port" "js/process.env"] "5021"]]]],
                          "user" ["def"
                                  "user"
                                  ["{}"
                                   [":name" "nil"]
                                   [":id" "nil"]
                                   [":nickname" "nil"]
                                   [":avatar" "nil"]
                                   [":password" "nil"]]],
                          "bookmark" ["def"
                                      "bookmark"
                                      ["{}" [":kind" ":def"] [":ns" "nil"] [":extra" "nil"] [":focus" ["[]"]]]],
                          "leaf" ["def" "leaf" ["{}" [":type" ":leaf"] [":author" "nil"] [":time" "nil"] [":text" "|"]]],
                          "database" ["def" "database" ["{}" [":sessions" ["{}"]] [":users" ["{}"]] [":ir" "ir-file"]]],
                          "router" ["def"
                                    "router"
                                    ["{}" [":name" "nil"] [":title" "nil"] [":data" ["{}"]] [":router" "nil"]]],
                          "file" ["def" "file" ["{}" [":ns" ["{}"]] [":defs" ["{}"]] [":proc" ["{}"]]]],
                          "session" ["def"
                                     "session"
                                     ["{}"
                                      [":user-id" "nil"]
                                      [":id" "nil"]
                                      [":nickname" "nil"]
                                      [":router" ["{}" [":name" ":files"] [":data" "nil"] [":router" "nil"]]]
                                      [":notifications" ["[]"]]
                                      [":writer" ["{}" [":selected-ns" "nil"] [":pointer" "0"] [":stack" ["[]"]]]]]],
                          "notification" ["def" "notification" ["{}" [":id" "nil"] [":kind" "nil"] [":text" "nil"]]],
                          "page-data" ["def"
                                       "page-data"
                                       ["{}"
                                        [":files" ["{}" [":ns-set" ["#{}"]] [":defs-set" ["#{}"]]]]
                                        [":editor" ["{}" [":focus" ["[]"]] [":expr" "nil"]]]]]},
                   :procs []},
         "updater.user" {:ns ["ns" "server.updater.user" [":require" ["[]" "server.util" ":refer" ["[]" "find-first"]]]],
                         :defs {"sign-up" ["defn"
                                           "sign-up"
                                           ["db" "op-data" "session-id" "op-id" "op-time"]
                                           ["let"
                                            [[["[]" "username" "password"] "op-data"]
                                             ["maybe-user"
                                              ["find-first"
                                               ["fn" ["user"] ["=" "username" [":name" "user"]]]
                                               ["vals" [":users" "db"]]]]]
                                            ["if"
                                             ["some?" "maybe-user"]
                                             ["update-in"
                                              "db"
                                              ["[]" ":sessions" "session-id" ":notifications"]
                                              ["fn"
                                               ["notifications"]
                                               ["conj"
                                                "notifications"
                                                ["{}"
                                                 [":id" "op-id"]
                                                 [":kind" ":attentive"]
                                                 [":text" ["str" "|Name is token: " "username"]]]]]]
                                             ["->"
                                              "db"
                                              ["assoc-in" ["[]" ":sessions" "session-id" ":user-id"] "op-id"]
                                              ["assoc-in"
                                               ["[]" ":users" "op-id"]
                                               ["{}"
                                                [":id" "op-id"]
                                                [":name" "username"]
                                                [":nickname" "username"]
                                                [":password" "password"]
                                                [":avatar" "nil"]]]]]]],
                                "log-in" ["defn"
                                          "log-in"
                                          ["db" "op-data" "session-id" "op-id" "op-time"]
                                          ["let"
                                           [[["[]" "username" "password"] "op-data"]
                                            ["maybe-user"
                                             ["find-first"
                                              ["fn" ["user"] ["and" ["=" "username" [":name" "user"]]]]
                                              ["vals" [":users" "db"]]]]]
                                           ["update-in"
                                            "db"
                                            ["[]" ":sessions" "session-id"]
                                            ["fn"
                                             ["session"]
                                             ["if"
                                              ["some?" "maybe-user"]
                                              ["if"
                                               ["=" "password" [":password" "maybe-user"]]
                                               ["assoc" "session" ":user-id" [":id" "maybe-user"]]
                                               ["update"
                                                "session"
                                                ":notifications"
                                                ["fn"
                                                 ["notifications"]
                                                 ["conj"
                                                  "notifications"
                                                  ["{}"
                                                   [":id" "op-id"]
                                                   [":kind" ":attentive"]
                                                   [":text" ["str" "|Wrong password for " "username"]]]]]]]
                                              ["update"
                                               "session"
                                               ":notifications"
                                               ["fn"
                                                ["notifications"]
                                                ["conj"
                                                 "notifications"
                                                 ["{}"
                                                  [":id" "op-id"]
                                                  [":kind" ":attentive"]
                                                  [":text" ["str" "|No user named: " "username"]]]]]]]]]]],
                                "log-out" ["defn"
                                           "log-out"
                                           ["db" "op-data" "session-id" "op-id" "op-time"]
                                           ["assoc-in" "db" ["[]" ":sessions" "session-id" ":user-id"] "nil"]]},
                         :procs []},
         "updater.session" {:ns ["ns" "server.updater.session" [":require" ["[]" "server.schema" ":as" "schema"]]],
                            :defs {"connect" ["defn"
                                              "connect"
                                              ["db" "op-data" "session-id" "op-id" "op-time"]
                                              ["assoc-in"
                                               "db"
                                               ["[]" ":sessions" "session-id"]
                                               ["merge" "schema/session" ["{}" [":id" "session-id"]]]]],
                                   "disconnect" ["defn"
                                                 "disconnect"
                                                 ["db" "op-data" "session-id" "op-id" "op-time"]
                                                 ["update"
                                                  "db"
                                                  ":sessions"
                                                  ["fn" ["session"] ["dissoc" "session" "session-id"]]]],
                                   "remove-notification" ["defn"
                                                          "remove-notification"
                                                          ["db" "op-data" "session-id" "op-id" "op-time"]
                                                          ["update-in"
                                                           "db"
                                                           ["[]" ":sessions" "session-id" ":notifications"]
                                                           ["fn"
                                                            ["notifications"]
                                                            ["subvec" "notifications" "0" "op-data"]]]],
                                   "select-ns" ["defn"
                                                "select-ns"
                                                ["db" "op-data" "session-id" "op-id" "op-time"]
                                                ["assoc-in"
                                                 "db"
                                                 ["[]" ":sessions" "session-id" ":writer" ":selected-ns"]
                                                 "op-data"]]},
                            :procs []},
         "main" {:ns ["ns"
                      "server.main"
                      [":require"
                       ["[]" "server.schema" ":as" "schema"]
                       ["[]" "server.network" ":refer" ["[]" "run-server!" "render-clients!"]]
                       ["[]" "server.updater.core" ":refer" ["[]" "updater"]]
                       ["[]" "cljs.core.async" ":refer" ["[]" "<!"]]
                       ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]
                       ["[]" "fipp.edn" ":as" "fipp"]]
                      [":require-macros" ["[]" "cljs.core.async.macros" ":refer" ["[]" "go-loop"]]]],
                 :defs {"persist!" ["defn"
                                    "persist!"
                                    []
                                    ["let"
                                     [["fs" ["js/require" "|fs"]]]
                                     ["fs.writeFileSync"
                                      [":storage-key" "schema/configs"]
                                      ["with-out-str" ["fipp/pprint" ["assoc" "@*writer-db" ":sessions" ["{}"]]]]]]],
                        "reload!" ["defn" "reload!" [] ["println" "|Code updated."] ["render-clients!" "@*reader-db"]],
                        "main!" ["defn"
                                 "main!"
                                 []
                                 ["println" "|Loading configs:" ["pr-str" "schema/configs"]]
                                 ["let"
                                  [["server-ch" ["run-server!" ["{}" [":port" [":port" "schema/configs"]]]]]]
                                  ["go-loop"
                                   ["[]"]
                                   ["let"
                                    [[["[]" "op" "op-data" "session-id" "op-id" "op-time"] ["<!" "server-ch"]]]
                                    [".log"
                                     "js/console"
                                     "|Action"
                                     ["str" "op"]
                                     ["clj->js" "op-data"]
                                     "session-id"
                                     "op-id"
                                     "op-time"]
                                    [".log" "js/console" "|Database:" ["clj->js" "@*writer-db"]]
                                    ["try"
                                     ["let"
                                      [["new-db"
                                        ["updater" "@*writer-db" "op" "op-data" "session-id" "op-id" "op-time"]]]
                                      ["reset!" "*writer-db" "new-db"]]
                                     ["catch" "js/Error" "e" [".log" "js/console" "e"]]]
                                    ["recur"]]]
                                  ["render-loop!"]]
                                 ["add-watch" "*reader-db" ":log" ["fn" []]]
                                 [".on"
                                  "js/process"
                                  "|SIGINT"
                                  ["fn"
                                   ["code"]
                                   ["persist!"]
                                   ["println" "|Saving file on exit" "code"]
                                   [".exit" "js/process"]]]
                                 ["println" "|Server started."]],
                        "*writer-db" ["defonce"
                                      "*writer-db"
                                      ["atom"
                                       ["let"
                                        [["fs" ["js/require" "|fs"]] ["filepath" [":storage-key" "schema/configs"]]]
                                        ["enable-console-print!"]
                                        ["if"
                                         ["fs.existsSync" "filepath"]
                                         ["do"
                                          ["println" "|Found storage."]
                                          ["read-string" ["fs.readFileSync" "filepath" "|utf8"]]]
                                         ["do" ["println" "|Found no storage."] "schema/database"]]]]],
                        "render-loop!" ["defn"
                                        "render-loop!"
                                        []
                                        ["if"
                                         ["not=" "@*reader-db" "@*writer-db"]
                                         ["do"
                                          ["reset!" "*reader-db" "@*writer-db"]
                                          ["--" "println" "|render loop"]
                                          ["render-clients!" "@*reader-db"]]]
                                        ["js/setTimeout" "render-loop!" "100"]],
                        "*reader-db" ["defonce" "*reader-db" ["atom" "@*writer-db"]]},
                 :procs []},
         "network" {:ns ["ns"
                         "server.network"
                         [":require"
                          ["[]" "cljs.nodejs" ":as" "nodejs"]
                          ["[]" "cljs.reader" ":as" "reader"]
                          ["[]" "cljs.core.async" ":refer" ["[]" "chan" ">!"]]
                          ["[]" "server.twig.container" ":refer" ["[]" "twig-container"]]
                          ["[]" "recollect.diff" ":refer" ["[]" "diff-bunch"]]
                          ["[]" "recollect.bunch" ":refer" ["[]" "render-bunch"]]]
                         [":require-macros" ["[]" "cljs.core.async.macros" ":refer" ["[]" "go"]]]],
                    :defs {"socket-registry" ["defonce" "socket-registry" ["atom" ["{}"]]],
                           "run-server!" ["defn"
                                          "run-server!"
                                          ["configs"]
                                          ["let"
                                           [["wss" ["new" "WebSocketServer" ["js-obj" "|port" [":port" "configs"]]]]]
                                           [".on"
                                            "wss"
                                            "|connection"
                                            ["fn"
                                             ["socket"]
                                             ["let"
                                              [["session-id" [".generate" "shortid"]]]
                                              ["handle-message" ":session/connect" "nil" "session-id"]
                                              ["swap!" "socket-registry" "assoc" "session-id" "socket"]
                                              [".info" "js/console" "|New client."]
                                              [".on"
                                               "socket"
                                               "|message"
                                               ["fn"
                                                ["rawData"]
                                                ["let"
                                                 [["action" ["reader/read-string" "rawData"]]
                                                  [["[]" "op" "op-data"] "action"]]
                                                 ["handle-message" "op" "op-data" "session-id"]]]]
                                              [".on"
                                               "socket"
                                               "|close"
                                               ["fn"
                                                []
                                                [".warn" "js/console" "|Client closed!"]
                                                ["swap!" "socket-registry" "dissoc" "session-id"]
                                                ["handle-message" ":session/disconnect" "nil" "session-id"]]]]]]]
                                          "server-chan"],
                           "render-clients!" ["defn"
                                              "render-clients!"
                                              ["db"]
                                              ["doseq"
                                               ["[]" "session-entry" [":sessions" "db"]]
                                               ["let"
                                                [[["[]" "session-id" "session"] "session-entry"]
                                                 ["old-store" ["or" ["get" "@client-caches" "session-id"] "nil"]]
                                                 ["new-store"
                                                  ["render-bunch" ["twig-container" "db" "session"] "old-store"]]
                                                 ["*changes" ["atom" ["[]"]]]
                                                 ["collect!" ["fn" ["x"] ["swap!" "*changes" "conj" "x"]]]
                                                 ["socket" ["get" "@socket-registry" "session-id"]]]
                                                ["diff-bunch" "collect!" ["[]"] "old-store" "new-store"]
                                                [".info"
                                                 "js/console"
                                                 "|Changes for"
                                                 "session-id"
                                                 "|:"
                                                 ["clj->js" "@*changes"]]
                                                ["if"
                                                 ["and" ["not=" "*changes" ["[]"]] ["some?" "socket"]]
                                                 ["do"
                                                  [".send" "socket" ["pr-str" "@*changes"]]
                                                  ["swap!" "client-caches" "assoc" "session-id" "new-store"]]]]]],
                           "client-caches" ["defonce" "client-caches" ["atom" ["{}"]]],
                           "server-chan" ["defonce" "server-chan" ["chan"]],
                           "shortid" ["def" "shortid" ["js/require" "|shortid"]],
                           "WebSocketServer" ["def" "WebSocketServer" [".-Server" "ws"]],
                           "handle-message" ["defn"
                                             "handle-message"
                                             ["op" "op-data" "session-id"]
                                             ["let"
                                              [["op-id" [".generate" "shortid"]] ["op-time" [".valueOf" ["js/Date."]]]]
                                              ["go"
                                               [">!" "server-chan" ["[]" "op" "op-data" "session-id" "op-id" "op-time"]]]]],
                           "ws" ["def" "ws" ["js/require" "|uws"]]},
                    :procs []},
         "twig.page-files" {:ns ["ns"
                                 "server.twig.page-files"
                                 [":require" ["[]" "recollect.bunch" ":refer" ["[]" "create-twig"]]]],
                            :defs {"twig-page-files" ["def"
                                                      "twig-page-files"
                                                      ["create-twig"
                                                       ":page-files"
                                                       ["fn"
                                                        ["files" "selected-ns"]
                                                        ["{}"
                                                         [":ns-set" ["into" ["#{}"] ["keys" "files"]]]
                                                         [":defs-set"
                                                          ["if"
                                                           ["some?" "selected-ns"]
                                                           ["do"
                                                            ["println" ["get-in" "files" ["[]" "selected-ns" ":defs"]]]
                                                            ["->>"
                                                             ["get-in" "files" ["[]" "selected-ns" ":defs"]]
                                                             ["keys"]
                                                             ["into" ["#{}"]]]]
                                                           ["#{}"]]]]]]]},
                            :procs []},
         "twig.user" {:ns ["ns" "server.twig.user" [":require" ["[]" "recollect.bunch" ":refer" ["[]" "create-twig"]]]],
                      :defs {"twig-user" ["def"
                                          "twig-user"
                                          ["create-twig" ":user" ["fn" ["user"] ["dissoc" "user" ":password"]]]]},
                      :procs []},
         "updater.core" {:ns ["ns"
                              "server.updater.core"
                              [":require"
                               ["[]" "server.updater.session" ":as" "session"]
                               ["[]" "server.updater.user" ":as" "user"]
                               ["[]" "server.updater.router" ":as" "router"]
                               ["[]" "server.updater.ir" ":as" "ir"]
                               ["[]" "server.updater.writer" ":as" "writer"]]],
                         :defs {"updater" ["defn"
                                           "updater"
                                           ["db" "op" "op-data" "session-id" "op-id" "op-time"]
                                           ["case"
                                            "op"
                                            [":session/connect"
                                             ["session/connect" "db" "op-data" "session-id" "op-id" "op-time"]]
                                            [":session/disconnect"
                                             ["session/disconnect" "db" "op-data" "session-id" "op-id" "op-time"]]
                                            [":user/log-in"
                                             ["user/log-in" "db" "op-data" "session-id" "op-id" "op-time"]]
                                            [":user/sign-up"
                                             ["user/sign-up" "db" "op-data" "session-id" "op-id" "op-time"]]
                                            [":user/log-out"
                                             ["user/log-out" "db" "op-data" "session-id" "op-id" "op-time"]]
                                            [":session/remove-notification"
                                             ["session/remove-notification"
                                              "db"
                                              "op-data"
                                              "session-id"
                                              "op-id"
                                              "op-time"]]
                                            [":session/select-ns"
                                             ["session/select-ns" "db" "op-data" "session-id" "op-id" "op-time"]]
                                            [":router/change"
                                             ["router/change" "db" "op-data" "session-id" "op-id" "op-time"]]
                                            [":writer/edit"
                                             ["writer/edit" "db" "op-data" "session-id" "op-id" "op-time"]]
                                            [":writer/point-to"
                                             ["writer/point-to" "db" "op-data" "session-id" "op-id" "op-time"]]
                                            [":writer/focus"
                                             ["writer/focus" "db" "op-data" "session-id" "op-id" "op-time"]]
                                            [":ir/add-ns" ["ir/add-ns" "db" "op-data" "session-id" "op-id" "op-time"]]
                                            [":ir/add-def" ["ir/add-def" "db" "op-data" "session-id" "op-id" "op-time"]]
                                            [":ir/remove-def"
                                             ["ir/remove-def" "db" "op-data" "session-id" "op-id" "op-time"]]
                                            [":ir/append-leaf"
                                             ["ir/append-leaf" "db" "op-data" "session-id" "op-id" "op-time"]]
                                            [":ir/delete-node"
                                             ["ir/delete-node" "db" "op-data" "session-id" "op-id" "op-time"]]
                                            [":ir/leaf-after"
                                             ["ir/leaf-after" "db" "op-data" "session-id" "op-id" "op-time"]]
                                            [":ir/indent" ["ir/indent" "db" "op-data" "session-id" "op-id" "op-time"]]
                                            [":ir/update-leaf"
                                             ["ir/update-leaf" "db" "op-data" "session-id" "op-id" "op-time"]]
                                            "db"]]},
                         :procs []},
         "twig.page-editor" {:ns ["ns"
                                  "server.twig.page-editor"
                                  [":require" ["[]" "recollect.bunch" ":refer" ["[]" "create-twig"]]]],
                             :defs {"twig-page-editor" ["def"
                                                        "twig-page-editor"
                                                        ["create-twig"
                                                         ":page-editor"
                                                         ["fn"
                                                          ["files" "writer"]
                                                          ["let"
                                                           [["pointer" [":pointer" "writer"]]
                                                            ["stack" [":stack" "writer"]]
                                                            ["bookmark" ["get" "stack" "pointer"]]]
                                                           ["if"
                                                            ["some?" "bookmark"]
                                                            ["let"
                                                             [["ns-text" [":ns" "bookmark"]]]
                                                             ["{}"
                                                              [":focus" [":focus" "bookmark"]]
                                                              [":expr"
                                                               ["case"
                                                                [":kind" "bookmark"]
                                                                [":ns" ["get-in" "files" ["[]" "ns-text" ":ns"]]]
                                                                [":procs" ["get-in" "files" ["[]" "ns-text" ":procs"]]]
                                                                [":def"
                                                                 ["get-in"
                                                                  "files"
                                                                  ["[]" "ns-text" ":defs" [":extra" "bookmark"]]]]
                                                                "nil"]]]]
                                                            "nil"]]]]]},
                             :procs []},
         "updater.ir" {:ns ["ns"
                            "server.updater.ir"
                            [":require"
                             ["[]" "server.schema" ":as" "schema"]
                             ["[]" "bisection-key.core" ":as" "bisection"]
                             ["[]" "server.util" ":refer" ["[]" "expr?" "leaf?" "bookmark->path"]]]],
                       :defs {"add-ns" ["defn"
                                        "add-ns"
                                        ["db" "op-data" "session-id" "op-id" "op-time"]
                                        ["assoc-in" "db" ["[]" ":ir" ":files" "op-data"] "schema/file"]],
                              "add-def" ["defn"
                                         "add-def"
                                         ["db" "op-data" "session-id" "op-id" "op-time"]
                                         ["let"
                                          [["selected-ns"
                                            ["get-in" "db" ["[]" ":sessions" "session-id" ":writer" ":selected-ns"]]]
                                           ["user-id" ["get-in" "db" ["[]" ":sessions" "session-id" ":user-id"]]]]
                                          ["assoc-in"
                                           "db"
                                           ["[]" ":ir" ":files" "selected-ns" ":defs" "op-data"]
                                           ["assoc" "schema/expr" ":time" "op-time" ":author" "user-id"]]]],
                              "remove-def" ["defn"
                                            "remove-def"
                                            ["db" "op-data" "session-id" "op-id" "op-time"]
                                            ["let"
                                             [["selected-ns"
                                               ["get-in" "db" ["[]" ":sessions" "session-id" ":writer" ":selected-ns"]]]]
                                             ["update-in"
                                              "db"
                                              ["[]" ":ir" ":files" "selected-ns" ":defs"]
                                              ["fn" ["defs"] ["dissoc" "defs" "op-data"]]]]],
                              "delete-leaf" ["defn"
                                             "delete-node"
                                             ["db" "op-data" "session-id" "op-id" "op-time"]
                                             ["let"
                                              [["writer" ["get-in" "db" ["[]" ":sessions" "session-id" ":writer"]]]
                                               ["bookmark" ["get" [":stack" "writer"] [":pointer" "writer"]]]
                                               ["parent-bookmark" ["update" "bookmark" ":focus" "butlast"]]
                                               ["data-path" ["bookmark->path" "parent-bookmark"]]
                                               ["child-keys" ["sort" ["keys" [":data" ["get-in" "db" "data-path"]]]]]
                                               ["deleted-key" ["last" [":focus" "bookmark"]]]
                                               ["idx" [".indexOf" "child-keys" "deleted-key"]]]
                                              ["->"
                                               "db"
                                               ["update-in"
                                                "data-path"
                                                ["fn"
                                                 ["expr"]
                                                 ["update"
                                                  "expr"
                                                  ":data"
                                                  ["fn" ["children"] ["dissoc" "children" "deleted-key"]]]]]
                                               ["update-in"
                                                ["[]"
                                                 ":sessions"
                                                 "session-id"
                                                 ":writer"
                                                 ":stack"
                                                 [":pointer" "writer"]
                                                 ":focus"]
                                                ["fn"
                                                 ["focus"]
                                                 ["if"
                                                  ["zero?" "idx"]
                                                  ["vec" ["butlast" "focus"]]
                                                  ["assoc"
                                                   "focus"
                                                   ["dec" ["count" "focus"]]
                                                   ["get" ["vec" "child-keys"] ["dec" "idx"]]]]]]]]],
                              "append-leaf" ["defn"
                                             "append-leaf"
                                             ["db" "op-data" "session-id" "op-id" "op-time"]
                                             ["let"
                                              [["writer" ["get-in" "db" ["[]" ":sessions" "session-id" ":writer"]]]
                                               [["{}" ["stack" ":stack"] ["pointer" ":pointer"]] "writer"]
                                               ["bookmark" ["get" "stack" "pointer"]]
                                               ["focus" [":focus" "bookmark"]]
                                               ["user-id" ["get-in" "db" ["[]" ":sessions" "session-id" ":user-id"]]]
                                               ["new-leaf"
                                                ["assoc" "schema/leaf" ":author" "user-id" ":time" "op-time"]]
                                               ["expr-path" ["bookmark->path" "bookmark"]]
                                               ["target-expr" ["get-in" "db" "expr-path"]]
                                               ["new-id"
                                                ["if"
                                                 ["empty?" [":data" "target-expr"]]
                                                 "bisection/mid-id"
                                                 ["let"
                                                  [["max-entry" ["apply" "max" ["keys" [":data" "target-expr"]]]]]
                                                  ["bisection/bisect" "max-entry" "bisection/max-id"]]]]]
                                              ["->"
                                               "db"
                                               ["update-in"
                                                "expr-path"
                                                ["fn"
                                                 ["expr"]
                                                 ["if"
                                                  ["expr?" "expr"]
                                                  ["assoc-in" "expr" ["[]" ":data" "new-id"] "new-leaf"]
                                                  "expr"]]]
                                               ["update-in"
                                                ["[]"
                                                 ":sessions"
                                                 "session-id"
                                                 ":writer"
                                                 ":stack"
                                                 [":pointer" "writer"]
                                                 ":focus"]
                                                ["fn" ["focus"] ["conj" "focus" "new-id"]]]]]],
                              "leaf-after" ["defn"
                                            "leaf-after"
                                            ["db" "op-data" "session-id" "op-id" "op-time"]
                                            ["let"
                                             [["writer" ["get-in" "db" ["[]" ":sessions" "session-id" ":writer"]]]
                                              [["{}" "stack" ":stack" "pointer" ":pointer"] "writer"]
                                              ["bookmark" ["get" "stack" "pointer"]]
                                              ["current-key" ["last" [":focus" "bookmark"]]]
                                              ["parent-bookmark" ["update" "bookmark" ":focus" "butlast"]]
                                              ["data-path" ["bookmark->path" "parent-bookmark"]]
                                              ["target-expr" ["get-in" "db" "data-path"]]
                                              ["child-keys" ["vec" ["sort" ["keys" [":data" "target-expr"]]]]]
                                              ["idx" [".indexOf" "child-keys" "current-key"]]
                                              ["next-id"
                                               ["bisection/bisect"
                                                "current-key"
                                                ["if"
                                                 ["=" "idx" ["dec" ["count" "child-keys"]]]
                                                 "bisection/max-id"
                                                 ["get" "child-keys" ["inc" "idx"]]]]]
                                              ["user-id" ["get-in" "db" ["[]" ":sessions" "session-id" ":user-id"]]]
                                              ["new-leaf" ["assoc" "schema/leaf" ":time" "op-time" ":author" "user-id"]]]
                                             ["->"
                                              "db"
                                              ["update-in"
                                               "data-path"
                                               ["fn" ["expr"] ["assoc-in" "expr" ["[]" ":data" "next-id"] "new-leaf"]]]
                                              ["update-in"
                                               ["[]"
                                                ":sessions"
                                                "session-id"
                                                ":writer"
                                                ":stack"
                                                [":pointer" "writer"]
                                                ":focus"]
                                               ["fn" ["focus"] ["conj" ["vec" ["butlast" "focus"]] "next-id"]]]]]],
                              "indent" ["defn"
                                        "indent"
                                        ["db" "op-data" "session-id" "op-id" "op-time"]
                                        ["let"
                                         [["writer" ["get-in" "db" ["[]" ":sessions" "session-id" ":writer"]]]
                                          [["{}" "stack" ":stack" "pointer" ":pointer"] "writer"]
                                          ["bookmark" ["get" "stack" "pointer"]]
                                          ["data-path" ["bookmark->path" "bookmark"]]
                                          ["user-id" ["get-in" "db" ["[]" ":sessions" "session-id" ":user-id"]]]
                                          ["new-expr" ["assoc" "schema/expr" ":time" "op-time" ":author" "user-id"]]]
                                         ["->"
                                          "db"
                                          ["update-in"
                                           "data-path"
                                           ["fn"
                                            ["node"]
                                            ["assoc-in" "new-expr" ["[]" ":data" "bisection/mid-id"] "node"]]]
                                          ["update-in"
                                           ["[]" ":sessions" "session-id" ":writer" ":stack" "pointer" ":focus"]
                                           ["fn"
                                            ["focus"]
                                            ["vec"
                                             ["concat" ["butlast" "focus"] ["[]" "bisection/mid-id" ["last" "focus"]]]]]]]]],
                              "update-leaf" ["defn"
                                             "update-leaf"
                                             ["db" "op-data" "session-id" "op-id" "op-time"]
                                             ["let"
                                              [["writer" ["get-in" "db" ["[]" ":sessions" "session-id" ":writer"]]]
                                               ["bookmark" ["get" [":stack" "writer"] [":pointer" "writer"]]]
                                               ["data-path" ["bookmark->path" "bookmark"]]]
                                              ["->"
                                               "db"
                                               ["update-in"
                                                "data-path"
                                                ["fn"
                                                 ["leaf"]
                                                 ["println" "|chaning leaf:" "leaf" "data-path" "op-data"]
                                                 ["assoc" "leaf" ":text" "op-data"]]]]]]},
                       :procs []}}}
